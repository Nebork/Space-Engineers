Solar Script:

void Main(string argument) {
    // Solar script to rotate multiple solar panels connected to a rotor. Uses one reference panel, which prefix should be the string in
    // 'panelPrefix', for one rotor with the prefix 'rotorPrefix'. Here "MS Solar Script Panel 1" is the reference for
    //  "MS Solar Script Panel 1" and so on.    


    int size = 3; //Number of rotors and reference solar panels. Don't change above 9!
    int critPower = 150; // kWh value, below which the according rotor shall rotate.

    string rotorPrefix = "MS Solar Script Rotor"; //Prefix of all used rotors. First rotor would be named "MS Solar Script Rotor 1".
    string panelPrefix = "MS Solar Script Panel"; //Same as with the rotors, currently supports up to nine rotors and panels (1-9).
    

    //Solar rotation itteration for each solar rotator
    for (int i = 1; i <= size; i++) {
        IMyMotorStator rotor = GridTerminalSystem.GetBlockWithName(rotorPrefix + " " + i.ToString()) as IMyMotorStator;
        IMySolarPanel panel = GridTerminalSystem.GetBlockWithName(panelPrefix + " " + i.ToString()) as IMySolarPanel;
        int currentPower = GetPanelPower(panel);

        if (currentPower <= critPower) {
            rotor.SetValueFloat("Velocity", 0.5f);                                  //1. Works the same as 2.
        } else {
            rotor.GetActionWithName("ResetVelocity").Apply(rotor);   //2. Works the same as 1.
        }
    }
}

public int GetPanelPower(IMySolarPanel panel)  
{  
    var _d = panel.DetailedInfo;
    // IMyTextPanel lcd = GridTerminalSystem.GetBlockWithName("LCD Panel") as IMyTextPanel;
    // If you want to see what's in DetailedInfo you can write:
    // Throw new Exception(_d);
    // Save the code and exit, then run the script on the programmable block to see the output
    string _power = _d.Split(new string[] {"\n"}, StringSplitOptions.None)[1].Split(' ')[2]; //Checking the MAX Output  
    int _powerOutput = Convert.ToInt32(Math.Round(Convert.ToDouble(_power))); 
    return _powerOutput;  
}







Status Script:

public void Main(string argument, UpdateType updateSource) {
    List<IMyTerminalBlock> batteries = new List<IMyTerminalBlock>();
    GridTerminalSystem.SearchBlocksOfName("Battery", batteries);
    double storedPower = 0;

    for (int i = 0; i < batteries.Count; i++) {
        IMyBatteryBlock battery = batteries[i] as IMyBatteryBlock;
        storedPower = storedPower + Convert.ToDouble(GetDetailedInfo(battery, 6, 2));
    }

    string text = batteries.Count.ToString() + " Batteries: " + Math.Round(((storedPower * 100)/(batteries.Count * 3)), 1) + "% at " + storedPower.ToString() + " MWh\n";



    List<IMyTerminalBlock> oxygenTanks = new List<IMyTerminalBlock>();
    GridTerminalSystem.SearchBlocksOfName("Oxygen Tank", oxygenTanks);
    double storedOxygen = 0;

    for (int i = 0; i < oxygenTanks.Count; i++) {
        IMyGasTank oxy = oxygenTanks[i] as IMyGasTank;
        string rawValue = GetDetailedInfo(oxy, 2, 1);
        storedOxygen = storedOxygen + Convert.ToDouble(rawValue.Substring(0, rawValue.Count() - 1));
    }
    storedOxygen = Math.Round(storedOxygen / oxygenTanks.Count, 1);
    text = text + oxygenTanks.Count.ToString() + " Oxygen Tanks: " + storedOxygen.ToString() + "% filled \n";


    List<IMyTerminalBlock> hydrogenTanks = new List<IMyTerminalBlock>();
    GridTerminalSystem.SearchBlocksOfName("Hydrogen Tank", hydrogenTanks);
    double storedHydrogen = 0;

    for (int i = 0; i < hydrogenTanks.Count; i++) {
        IMyGasTank hyd = hydrogenTanks[i] as IMyGasTank;
        string rawValue = GetDetailedInfo(hyd, 2, 1);
        storedHydrogen = storedHydrogen + Convert.ToDouble(rawValue.Substring(0, rawValue.Count() - 1));
    }

    storedHydrogen = Math.Round(storedHydrogen / hydrogenTanks.Count, 1);
    text = text + hydrogenTanks.Count.ToString() + " Hydrogen Tanks: " + storedHydrogen.ToString() + "% filled \n";

    IMyTextPanel lcd = (IMyTextPanel) GridTerminalSystem.GetBlockWithName("MS LCD Panel");
    lcd.WritePublicText(text);

    IMyCockpit cockpit = (IMyCockpit) GridTerminalSystem.GetBlockWithName("Utility Cockpit");
    IMyTextSurface surface = cockpit.GetSurface(1);
    surface.WriteText(text, false);
}

public string GetDetailedInfo(IMyTerminalBlock block, int line, int word, int pos = 0, int length = 1) {
    string _d = block.DetailedInfo;
    string _value = _d.Split('\n')[line].Split(' ')[word];

    if (length == 1) {length = _value.Count();}

    _value = _value.Substring(pos, length);
    return _value;
}




MISSILE CTRL

public void Main(string argument, UpdateType updateSource)
{
	//Ordering of identifiers of the fireable rockets.
	string[] identifiers = {"L.1", "R.1", "L.2", "R.2"};
	
	for (int i = 0; i < identifiers.Length; i++)
	{
		//Find the first connected rocket.
		try
		{
			//Declaring the needed parts
			IMyThrust thruster = GridTerminalSystem.GetBlockWithName("(Rkt) Ion Thruster (" + identifiers[i] + ")") as IMyThrust;
			IMyWarhead warhead = GridTerminalSystem.GetBlockWithName("(Rkt) Warhead (" + identifiers[i] + ")") as IMyWarhead;
			IMyShipMergeBlock mergeBlock = GridTerminalSystem.GetBlockWithName("(Rkt) Merge Block (" + identifiers[i] + ")") as IMyShipMergeBlock;
			
			//Start thrusters, arm warhead, release!
			thruster.ThrustOverridePercentage = 1;
			warhead.IsArmed = true;
			warhead.DetonationTime = 30;
			warhead.StartCountdown();
			mergeBlock.Enabled = false;
			
			break;
		}
		
		catch (Exception e)
		{
			continue;
		}
	}
}
